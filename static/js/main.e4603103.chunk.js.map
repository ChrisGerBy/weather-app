{"version":3,"sources":["helpers/helper.js","components/CurrentConditions/messages.js","components/CurrentConditions/index.js","components/CurrentConditions/CurrentConditions.js","components/Forecast/messages.js","components/TemperatureScale/index.js","components/TemperatureScale/TemperatureScale.js","components/Forecast/index.js","components/Forecast/Forecast.js","components/SearchLocation/messages.js","components/SearchLocation/index.js","components/SearchLocation/SearchLocation.js","components/NoDataView/index.js","components/NoDataView/NoDataView.js","components/Weather/Weather.js","components/Weather/index.js","components/Settings/index.js","components/Settings/Settings.js","components/LocationData/messages.js","components/LocationData/LocationData.js","components/Modal/Modal.js","components/Modal/index.js","App.js","serviceWorker.js","index.js"],"names":["getTime","str","split","slice","join","getDate","reverse","convertTemperature","temperature","targetScale","Math","ceil","createWeatherIconLink","num","toString","length","formatTimeZone","defineMessages","location","id","defaultMessage","date","weather","showLocationInfo","CurrentConditions","currentConditions","city","temperatureScale","onChageTemperatureScale","country","WeatherText","LocalObservationDateTime","Temperature","WeatherIcon","TableContainer","className","Table","TableBody","TableRow","TableCell","component","scope","messages","Button","variant","onClick","Icon","src","alt","Metric","Value","Imperial","Tooltip","title","interactive","arrow","type","day","night","TemperatureScale","changeTemperatureScale","Select","value","onChange","MenuItem","Forecast","forecast","map","key","nightIcon","text","picture","dayIcon","fromC","fromF","toC","toF","searchPlaceholder","searchButton","getForecast","SearchLocation","cityOnChange","searchLocation","getForecastFor5Days","placeholder","Input","event","color","NoDataView","require","config","Weather","props","e","target","locationData","state","setState","handleWeatherResponse","data","currentCity","showCurrentConditions","showForecast","getWeatherData","a","async","locationKey","language","fetch","process","currentConditionsResponse","json","status","currentConditionsResponseEN","currentConditionsEN","setLocationDataState","LocalizedName","Key","Country","geoPosition","latitude","GeoPosition","Latitude","longitude","Longitude","region","Region","timeZone","TimeZone","Name","GmtOffset","locationFound","response","cityData","window","localStorage","setItem","responseEn","cityDataEn","clear","forecastData","DailyForecasts","Date","time","Minimum","Unit","Maximum","Day","IconPhrase","Night","getItem","this","prevProps","Object","entries","Component","Settings","changeLanguage","getBackground","backgroundError","settingsBlockRef","React","createRef","closeIcon","toggleSettings","displayStyle","current","style","display","classList","remove","add","ref","timezone","geoposition","LocationData","hideModal","url","allowFullScreen","modalRoot","document","getElementById","Modal","el","createElement","appendChild","removeChild","ReactDOM","createPortal","ru","messagesRu","en","messagesEn","App","then","res","image","results","floor","random","urls","regular","background","catch","error","console","log","getCityName","coords","responseData","components","showModal","navigator","geolocation","getCurrentPosition","backgroundPicture","backgroundImage","backgroundSize","locale","lang","Boolean","hostname","match","path","render","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4603103.chunk.js","sourcesContent":["export const getTime = (str) => str.split('').slice(11, 16).join('');\n\nexport const getDate = (str) => str.split('').slice(0, 10).join('').split('-')\n  .reverse()\n  .join('.');\n\nexport const convertTemperature = (temperature, targetScale) => (\n  targetScale === 'fahrenheit'\n    ? Math.ceil((temperature * 9 / 5 + 32))\n    : Math.ceil(((temperature - 32) * 5 / 9))\n);\n\nexport const createWeatherIconLink = (num) => ((num.toString().length < 2)\n  ? `https://developer.accuweather.com/sites/default/files/0${num}-s.png`\n  : `https://developer.accuweather.com/sites/default/files/${num}-s.png`);\n\nexport const formatTimeZone = (num) => (\n  num > 0\n    ? `(GMT +${num})`\n    : `(GMT ${num})`\n);\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  location: {\n    id: 'currentConditions.location',\n    defaultMessage: 'Location',\n  },\n  date: {\n    id: 'currentConditions.date',\n    defaultMessage: 'Date',\n  },\n  weather: {\n    id: 'currentConditions.weather',\n    defaultMessage: 'Current weather',\n  },\n  temperature: {\n    id: 'currentConditions.temperature',\n    defaultMessage: 'Temperature',\n  },\n  showLocationInfo: {\n    id: 'currentConditions.showLocationInfo',\n    defaultMessage: 'Show location info',\n  },\n});\n","import CurrentConditions from './CurrentConditions';\n\nexport default CurrentConditions;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TableContainer, Table, TableBody, TableRow, TableCell, Icon, Tooltip, Button,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport { getTime, getDate, createWeatherIconLink } from '../../helpers/helper';\n\nimport './CurrentConditions.styles.css';\nimport messages from './messages';\n\nconst CurrentConditions = ({\n  currentConditions, city, temperatureScale, onChageTemperatureScale, country, showLocationInfo,\n}) => {\n  const {\n    WeatherText, LocalObservationDateTime, Temperature, WeatherIcon,\n  } = currentConditions;\n\n  return (\n    <TableContainer className=\"weather_data\">\n      <Table>\n        <TableBody>\n          <TableRow>\n            <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.location} /></TableCell>\n            <TableCell>\n              {city}\n              {', '}\n              {country}\n              <Button variant=\"outlined\" className=\"weather_data_location-info\" onClick={showLocationInfo}>\n                <p className=\"weather_data_location-info__label\"><FormattedMessage {...messages.showLocationInfo} /></p>\n                <Icon className=\"weather_data_location-info__icon\">room</Icon>\n              </Button>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.date} /></TableCell>\n            <TableCell>\n              {getDate(LocalObservationDateTime)}\n              {', '}\n              {getTime(LocalObservationDateTime)}\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.weather} /></TableCell>\n            <TableCell className=\"weather_data_current-weather\">\n              <img src={createWeatherIconLink(WeatherIcon)} alt=\"weather-icon\" />\n              <span>{WeatherText}</span>\n            </TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.temperature} /></TableCell>\n            <TableCell>\n              <span>{temperatureScale === 'celsium' ? `${Temperature.Metric.Value} °C` : `${Temperature.Imperial.Value} F`}</span>\n              <Tooltip title={temperatureScale === 'celsium' ? 'Convert to fahrenheit' : 'Convert to celsium'} interactive arrow>\n                <button className=\"weather_data_tempscale-btn\" type=\"button\" onClick={onChageTemperatureScale}>\n                  <Icon>cached</Icon>\n                </button>\n              </Tooltip>\n            </TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nCurrentConditions.propTypes = {\n  city: PropTypes.string.isRequired,\n  temperatureScale: PropTypes.string.isRequired,\n  onChageTemperatureScale: PropTypes.func.isRequired,\n  currentConditions: PropTypes.shape({\n    WeatherText: PropTypes.string.isRequired,\n    LocalObservationDateTime: PropTypes.string.isRequired,\n    Temperature: PropTypes.object.isRequired,\n    WeatherIcon: PropTypes.number.isRequired,\n  }).isRequired,\n  country: PropTypes.string,\n  showLocationInfo: PropTypes.func.isRequired,\n};\n\nexport default CurrentConditions;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  day: {\n    id: 'forecast.day',\n    defaultMessage: 'Day',\n  },\n  night: {\n    id: 'forecast.night',\n    defaultMessage: 'Night',\n  },\n});\n","import TemperatureScale from './TemperatureScale';\n\nexport default TemperatureScale;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { FormattedMessage } from 'react-intl';\n\nconst TemperatureScale = ({ changeTemperatureScale, temperatureScale }) => (\n  <Select\n    value={temperatureScale}\n    onChange={changeTemperatureScale}\n  >\n    <MenuItem value=\"celsium\"><FormattedMessage id=\"temperature.scale.celsium\" defaultMessage=\"Celsium\" /></MenuItem>\n    <MenuItem value=\"fahrenheit\"><FormattedMessage id=\"temperature.scale.fahrenheit\" defaultMessage=\"Fahrenheit\" /></MenuItem>\n  </Select>\n);\n\nTemperatureScale.propTypes = {\n  changeTemperatureScale: PropTypes.func.isRequired,\n  temperatureScale: PropTypes.string.isRequired,\n};\n\nexport default TemperatureScale;\n","import Forecast from './Forecast';\n\nexport default Forecast;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Forecast.styles.css';\nimport { Tooltip } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from './messages';\nimport TemperatureScale from \"../TemperatureScale\";\n\nconst Forecast = ({ forecast, temperatureScale, city, onChageTemperatureScale }) => (\n  <div className=\"forecast\">\n    <h2>Forecast for {city}</h2>\n    <TemperatureScale changeTemperatureScale={onChageTemperatureScale} temperatureScale={temperatureScale} />\n      <div className=\"forecast__data\">\n      {forecast.map((day) => (\n        <div className=\"forecast_item\" key={day.date}>\n          <p className=\"forecast_item_date\">{day.date}</p>\n          <div className=\"forecast_item_icons\">\n            <div className=\"forecast_item_temp_block\">\n              <p><FormattedMessage {...messages.night} /></p>\n              <Tooltip title={day.nightIcon.text} interactive arrow>\n                <img src={day.nightIcon.picture} alt=\"night-icon\" />\n              </Tooltip>\n            </div>\n            <div className=\"forecast_item_icons_block\">\n              <p><FormattedMessage {...messages.day} /></p>\n              <Tooltip title={day.dayIcon.text} interactive arrow>\n                <img src={day.dayIcon.picture} alt=\"day-icon\" />\n              </Tooltip>\n            </div>\n          </div>\n          <div className=\"forecast_item_temperature\">\n            <p>{temperatureScale === 'celsium' ? `${day.temperature.fromC} °C` : `${day.temperature.fromF} F`}</p>\n            <p>{temperatureScale === 'celsium' ? `${day.temperature.toC} °C` : `${day.temperature.toF} F`}</p>\n          </div>\n\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nForecast.propTypes = {\n  forecast: PropTypes.arrayOf(PropTypes.object).isRequired,\n  temperatureScale: PropTypes.string.isRequired,\n};\n\nexport default Forecast;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  searchPlaceholder: {\n    id: 'search.placeholder',\n    defaultMessage: 'City',\n  },\n  searchButton: {\n    id: 'search.button',\n    defaultMessage: 'Get weather',\n  },\n  getForecast: {\n    id: 'weather.getForecastButton',\n    defaultMessage: 'Forecast for 5 days',\n  },\n});\n","import SearchLocation from './SearchLocation';\n\nexport default SearchLocation;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Input from '@material-ui/core/Input';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport messages from './messages';\n\n\nimport './SearchLocation.styles.css';\n\nconst SearchLocation = ({ cityOnChange, searchLocation, getForecastFor5Days }) => (\n  <div className=\"weather_search-panel\">\n    <FormattedMessage {...messages.searchPlaceholder}>\n      {\n          (placeholder) => (\n            <Input placeholder={placeholder} onChange={(event) => cityOnChange(event)} />\n          )\n        }\n    </FormattedMessage>\n\n    <Button variant=\"contained\" color=\"primary\" onClick={searchLocation}>\n      <FormattedMessage {...messages.searchButton} />\n    </Button>\n    <Button variant=\"contained\" color=\"primary\" className=\"weather_data_forecast\" onClick={getForecastFor5Days}>\n      <FormattedMessage {...messages.getForecast} />\n    </Button>\n  </div>\n);\n\nSearchLocation.propTypes = {\n  cityOnChange: PropTypes.func.isRequired,\n  searchLocation: PropTypes.func.isRequired,\n  getForecastFor5Days: PropTypes.func.isRequired,\n};\n\n\nexport default SearchLocation;\n","import NoDataView from './NoDataView';\n\nexport default NoDataView;","import React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport './NoDataView.styles.css';\n\nconst NoDataView = () => (\n  <div className=\"nodata-message\">\n    <FormattedMessage id=\"nodata.message\" defaultMessage=\"No data found according to your request. Please, change your request and try one more time.\" />\n  </div>\n);\n\nexport default NoDataView;\n","import React, { Component } from 'react';\nimport CurrentConditions from '../CurrentConditions';\nimport Forecast from \"../Forecast\";\nimport { getDate, getTime, convertTemperature, createWeatherIconLink, formatTimeZone } from \"../../helpers/helper\";\nimport SearchLocation from \"../SearchLocation\";\n\nimport './Weather.styles.css';\nimport NoDataView from \"../NoDataView\";\n\nrequire('dotenv').config();\n\nclass Weather extends Component {\n  constructor(props) {\n    super(props);\n    const city = window.localStorage.getItem('city');\n    this.state = {\n      locationData: {\n        city,\n        locationKey: null,\n        country: '',\n        geoPosition: {},\n        region: '',\n        timeZone: '',\n      },\n      currentConditions: {},\n      showCurrentConditions: true,\n      temperatureScale: 'celsium',\n      forecastData: [],\n      showForecast: false,\n      locationFound: true,\n    };\n  }\n\n  cityOnChange = (e) => {\n    const city = e.target.value;\n    const { locationData } = this.state;\n    this.setState({ locationData: {\n      ...locationData,\n      city\n    } });\n  };\n\n  handleWeatherResponse = (city, data) => {\n    this.setState({\n      currentConditions: {\n        ...data[0],\n        currentCity: city,\n      },\n      showCurrentConditions: true,\n      showForecast: false,\n    });\n  };\n\n  getWeatherData = async () => {\n    const { locationKey } = this.state.locationData;\n    const { language } = this.props;\n    const { city } = this.state.locationData;\n    const currentConditionsResponse = await fetch(`https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${process.env.REACT_APP_ACCUWEATHER_API_KEY}&language=${language}`)\n    const currentConditions = await currentConditionsResponse.json();\n    if (currentConditionsResponse.status === 200 && currentConditions.length) {\n      this.handleWeatherResponse(city, currentConditions);\n\n    } else {\n      const currentConditionsResponseEN = await fetch(`https://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${process.env.REACT_APP_ACCUWEATHER_API_KEY}&language=en`)\n      const currentConditionsEN = await currentConditionsResponseEN.json();\n      if (currentConditionsResponseEN.status === 200 && currentConditionsEN.length) {\n        this.handleWeatherResponse(city, currentConditionsEN);\n      }\n    }\n  };\n\n  setLocationDataState = (data) => {\n    this.setState({\n      locationData: {\n        city: data[0].LocalizedName,\n        locationKey: data[0].Key,\n        country: data[0].Country.LocalizedName,\n        geoPosition: {\n          latitude: data[0].GeoPosition.Latitude,\n          longitude: data[0].GeoPosition.Longitude,\n        },\n        region: data[0].Region.LocalizedName,\n        timeZone: `${data[0].TimeZone.Name} ${formatTimeZone(data[0].TimeZone.GmtOffset)}`,\n      },\n      locationFound: true,\n      showCurrentConditions: true,\n      showForecast: false,\n    });\n    this.getWeatherData();\n  };\n\n  searchLocation = async () => {\n    const { language } = this.props;\n    const { city } = this.state.locationData;\n    const response = await fetch(`https://dataservice.accuweather.com/locations/v1/cities/search?apikey=${process.env.REACT_APP_ACCUWEATHER_API_KEY}&q=${city}&language=${language}`);\n    const cityData = await response.json();\n    if (response.status === 200 && cityData.length){\n      window.localStorage.setItem(`city`, city);\n      window.localStorage.setItem(`language`, language);\n        this.setLocationDataState(cityData);\n    } else {\n      // Try default search with english language\n      const responseEn = await fetch(`https://dataservice.accuweather.com/locations/v1/cities/search?apikey=${process.env.REACT_APP_ACCUWEATHER_API_KEY}&q=${city}&language=en`);\n      const cityDataEn = await responseEn.json();\n      if (response.status === 200 && cityDataEn.length) {\n        window.localStorage.setItem(`city`, city);\n        window.localStorage.setItem(`language`, 'en');\n        this.setLocationDataState(cityDataEn);\n      } else {\n        window.localStorage.clear();\n        this.setState({ locationFound: false })\n      }\n\n    }\n  };\n\n  onChageTemperatureScale = () => {\n    const { temperatureScale } = this.state;\n    this.setState({\n      temperatureScale: temperatureScale === 'celsium' ? 'fahrenheit' : 'celsium',\n    })\n  };\n\n  showLocationInfo = () => {\n    const { locationData } = this.state;\n    const { showLocationInfo } = this.props;\n    showLocationInfo(locationData);\n  };\n\n  getForecastFor5Days = async () => {\n    const { locationKey, city } = this.state.locationData;\n    const { language } = this.props;\n    const response = await fetch(`https://dataservice.accuweather.com/forecasts/v1/daily/5day/${locationKey}?apikey=${process.env.REACT_APP_ACCUWEATHER_API_KEY}&language=${language}`);\n    const forecastData = await response.json();\n\n    const data = forecastData.DailyForecasts.map(date => {\n      return {\n        date: getDate(date.Date),\n        time: getTime(date.Date),\n        temperature: {\n          fromF: date.Temperature.Minimum.Unit === 'F' ? `${date.Temperature.Minimum.Value}` : convertTemperature(date.Temperature.Minimum.Value, 'fahrenheit'),\n          fromC: date.Temperature.Minimum.Unit === 'C' ? `${date.Temperature.Minimum.Value}` : convertTemperature(date.Temperature.Minimum.Value,'celsium'),\n          toF: date.Temperature.Maximum.Unit === 'F' ? `${date.Temperature.Maximum.Value}` : convertTemperature(date.Temperature.Maximum.Value, 'fahrenheit'),\n          toC: date.Temperature.Maximum.Unit === 'C' ? `${date.Temperature.Maximum.Value}` : convertTemperature(date.Temperature.Maximum.Value,'celsium'),\n        },\n        dayIcon: {\n          picture: createWeatherIconLink(date.Day.Icon),\n          text: date.Day.IconPhrase,\n        },\n        nightIcon: {\n          picture: createWeatherIconLink(date.Night.Icon),\n          text: date.Night.IconPhrase,\n        }\n      }\n    });\n\n    const { currentConditions } = this.state;\n\n    this.setState({\n      forecastData: data,\n      showForecast: true,\n      showCurrentConditions: false,\n      currentConditions: {\n        ...currentConditions,\n        currentCity: city,\n      }\n    });\n  };\n\n  componentDidMount() {\n    const { language } = this.props;\n    const { city } = this.state.locationData;\n\n    if(city && language) {\n      const { locationData } = this.state;\n      this.setState({ locationData: {\n        ...locationData,\n        city,\n      }});\n      this.searchLocation();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.language !== prevProps.language) {\n      const city = window.localStorage.getItem(`city${this.props.language}`);\n      if (city) {\n        this.searchLocation();\n      }\n    }\n  }\n\n  render() {\n    const { currentConditions, temperatureScale, locationData, forecastData, locationFound, showCurrentConditions, showForecast } = this.state;\n    const { country } = locationData;\n    const { currentCity} = currentConditions;\n\n    return (\n      <div className=\"weather\">\n        <SearchLocation searchLocation={this.searchLocation} cityOnChange={(e) => this.cityOnChange(e)} getForecastFor5Days={this.getForecastFor5Days}/>\n        {!locationFound && <NoDataView />}\n        {locationFound && showCurrentConditions && !!Object.entries(currentConditions).length &&\n        <CurrentConditions\n          city={currentCity}\n          country={country}\n          currentConditions={currentConditions}\n          temperatureScale={temperatureScale}\n          onChageTemperatureScale={this.onChageTemperatureScale}\n          showLocationInfo={this.showLocationInfo}\n        />\n        }\n        {locationFound && showForecast && !!forecastData.length &&\n        <Forecast forecast={forecastData} temperatureScale={temperatureScale} city={currentCity} onChageTemperatureScale={this.onChageTemperatureScale}/>\n        }\n        </div>\n    );\n  }\n}\n\nexport default Weather;\n","import Weather from './Weather';\n\nexport default Weather;\n","import Settings from './Settings';\n\nexport default Settings;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Icon } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nimport './Settings.styles.css';\n\nconst Settings = ({\n  language, changeLanguage, getBackground, backgroundError,\n}) => {\n  const settingsBlockRef = React.createRef();\n  const closeIcon = React.createRef();\n\n  const toggleSettings = () => {\n    const displayStyle = settingsBlockRef.current.style.display;\n    if (displayStyle === 'none' || !displayStyle) {\n      settingsBlockRef.current.classList.add('mobile-view');\n      settingsBlockRef.current.style.display = 'flex';\n      closeIcon.current.style.display = 'block';\n    } else {\n      settingsBlockRef.current.classList.remove('mobile-view');\n      settingsBlockRef.current.style.display = 'none';\n      closeIcon.current.style.display = 'none';\n    }\n  };\n\n  return (\n    <div className=\"settings\">\n      <div className=\"settings__block\" ref={settingsBlockRef}>\n        <Select\n          className=\"language-select\"\n          value={language}\n          onChange={(event) => changeLanguage(event.target.value)}\n        >\n          <MenuItem value=\"en\"><FormattedMessage id=\"language.english\" defaultMessage=\"English\" /></MenuItem>\n          <MenuItem value=\"ru\"><FormattedMessage id=\"language.russian\" defaultMessage=\"Russian\" /></MenuItem>\n        </Select>\n        {!backgroundError && (\n        <Button variant=\"outlined\" className=\"change-bg-btn\" onClick={getBackground}>\n          <FormattedMessage id=\"changeBackground.title\" defaultMessage=\"Change background\" />\n        </Button>\n        )}\n        <button className=\"settings__close-icon\" type=\"button\" ref={closeIcon} onClick={toggleSettings}>\n          <Icon>close</Icon>\n        </button>\n      </div>\n      <Icon className=\"settings__icon\" onClick={toggleSettings}>language</Icon>\n    </div>\n  );\n};\n\nSettings.propTypes = {\n  language: PropTypes.string.isRequired,\n  changeLanguage: PropTypes.func.isRequired,\n  getBackground: PropTypes.func.isRequired,\n  backgroundError: PropTypes.bool.isRequired,\n};\n\nexport default Settings;\n","import { defineMessages } from 'react-intl';\n\nexport default defineMessages({\n  location: {\n    id: 'locationData.location',\n    defaultMessage: 'Location',\n  },\n  region: {\n    id: 'locationData.region',\n    defaultMessage: 'Region',\n  },\n  timezone: {\n    id: 'locationData.timezone',\n    defaultMessage: 'Timezone',\n  },\n  geoposition: {\n    id: 'locationData.geoposition',\n    defaultMessage: 'Geoposition',\n  },\n  latitude: {\n    id: 'locationData.latitude',\n    defaultMessage: 'Latitude',\n  },\n  longitude: {\n    id: 'locationData.longitude',\n    defaultMessage: 'Longitude',\n  },\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Table, TableBody, TableCell, TableContainer, TableRow, Icon,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\n\nimport './LocationData.styles.css';\nimport messages from './messages';\n\nconst LocationData = ({ locationData, hideModal }) => {\n  const {\n    city, country, geoPosition, region, timeZone,\n  } = locationData;\n\n  const url = `https://www.google.com/maps/embed/v1/view?zoom=10&center=${geoPosition.latitude},${geoPosition.longitude}&key=${process.env.REACT_APP_GOOGLE_MAPS_KEY}`;\n\n  return (\n    <div className=\"location-data\">\n      <button className=\"location-data__close-icon\" type=\"button\" onClick={hideModal}>\n        <Icon>close</Icon>\n      </button>\n      <TableContainer className=\"location-data__table\">\n        <Table>\n          <TableBody>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.location} /></TableCell>\n              <TableCell>\n                {city}\n                ,\n                {' '}\n                {country}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.region} /></TableCell>\n              <TableCell>\n                {region}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.timezone} /></TableCell>\n              <TableCell>\n                {timeZone}\n              </TableCell>\n            </TableRow>\n            <TableRow>\n              <TableCell component=\"th\" scope=\"row\"><FormattedMessage {...messages.geoposition} /></TableCell>\n              <TableCell>\n                <p>\n                  <FormattedMessage {...messages.latitude} />\n                  {': '}\n                  {geoPosition.latitude}\n                </p>\n                <p>\n                  <FormattedMessage {...messages.longitude} />\n                  {': '}\n                  {geoPosition.longitude}\n                </p>\n              </TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <iframe title=\"google-map\" className=\"location-data__map\" src={url} allowFullScreen />\n    </div>\n\n  );\n};\n\nLocationData.propTypes = {\n  locationData: PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    geoPosition: PropTypes.object.isRequired,\n    region: PropTypes.string.isRequired,\n    timeZone: PropTypes.string.isRequired,\n  }).isRequired,\n  hideModal: PropTypes.func.isRequired,\n};\n\nexport default LocationData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport LocationData from '../LocationData/LocationData';\n\nconst modalRoot = document.getElementById('modal-root');\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.el = document.createElement('div');\n  }\n\n  componentDidMount() {\n    modalRoot.appendChild(this.el);\n  }\n\n  componentWillUnmount() {\n    modalRoot.removeChild(this.el);\n  }\n\n  render() {\n    const { locationData, hideModal } = this.props;\n    return ReactDOM.createPortal(\n      <LocationData locationData={locationData} hideModal={hideModal} />,\n      this.el,\n    );\n  }\n}\n\nModal.propTypes = {\n  locationData: PropTypes.shape({\n    city: PropTypes.string.isRequired,\n    country: PropTypes.string.isRequired,\n    geoPosition: PropTypes.object.isRequired,\n    region: PropTypes.string.isRequired,\n    timeZone: PropTypes.string.isRequired,\n  }).isRequired,\n  hideModal: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import Modal from './Modal';\n\nexport default Modal;","import React, { Component } from 'react';\nimport './App.css';\nimport Weather from './components/Weather';\nimport { IntlProvider } from 'react-intl';\nimport messagesRu from './translations/ru.json';\nimport messagesEn from './translations/en.json';\nimport Settings from \"./components/Settings\";\nimport Modal from './components/Modal';\n\nconst messages = {\n  ru: messagesRu,\n  en: messagesEn,\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      background: '',\n      backgroundError: false,\n      language: 'en',\n      showModal: false,\n      locationData: {},\n      city: '',\n    };\n  }\n\n  getBackground = () => {\n    const query = 'weather';\n    fetch(`https://api.unsplash.com/search/photos/?page=1&per_page=20&query=${query}&client_id=${process.env.REACT_APP_UNSPLASH_ACCESS_KEY}`)\n      .then((res) => res.json())\n      .then((data) => {\n        const image = data.results[Math.floor(Math.random() * 20)].urls.regular;\n        this.setState({ background: image });\n      })\n      .catch((error) => {\n        console.log(`Background image not loaded. Reason: ${error}`);\n        this.setState({ backgroundError: true });\n      });\n  };\n\n  getCityName = async (data) => {\n    const { latitude, longitude } = data.coords;\n    const url = `https://api.opencagedata.com/geocode/v1/json?q=${latitude},${longitude}&key=1e58aa5d387545bd905c7a06768ce2be`;\n    const response = await fetch(url);\n    const responseData =await response.json();\n    if (responseData.results.length === 1) {\n      const currentCity = responseData.results[0].components.city;\n      window.localStorage.setItem('city', currentCity);\n      this.setState({ city: currentCity });\n    }\n  };\n\n  componentDidMount() {\n    const city = window.localStorage.getItem(`city`); \n    const language = window.localStorage.getItem('language');\n    if (language) {\n      this.setState({ language });\n    } else {\n      this.setState({ language: 'ru' });\n      window.localStorage.setItem('language', 'ru');\n    }\n    if (!city) {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.getCityName);\n      } else {\n       console.log(\"Geolocation is not supported by this browser.\");\n      }\n    } else {\n      this.setState({ city });\n    }\n    this.getBackground();\n  }\n\n  changeLanguage = (language) => {\n    this.setState({ language });\n    window.localStorage.setItem('language', language);\n  };\n\n  showLocationInfo = (data) => {\n    this.setState({\n      locationData: data,\n      showModal: true,\n    });\n  };\n\n  hideModal = () => {\n    this.setState({\n      showModal: false,\n    });\n  };\n\n  render() {\n    const { background, language, backgroundError, showModal, locationData, city } = this.state;\n    const backgroundPicture = {\n      backgroundImage: `url('${background}')`,\n      backgroundSize: 'cover',\n    };\n\n    return (\n      <IntlProvider locale={language} messages={messages[language]}>\n        <div className=\"App\" style={backgroundPicture}>\n          {city && <Weather language={language} showLocationInfo={(data) => this.showLocationInfo(data)} />}\n          <Settings language={language} changeLanguage={(lang) => this.changeLanguage(lang)} getBackground={this.getBackground} backgroundError={backgroundError} />\n          {showModal && <Modal locationData={locationData} hideModal={this.hideModal} />}\n        </div>\n      </IntlProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nrequire('dotenv').config({ path: '../.env' });\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}